package boundary;

/**
 *
 * @author Low Sin Mun
 */
import java.awt.event.*;
import javax.swing.*;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import adt.SortedDoublyLinkedList;
import entity.Course;
import java.awt.event.KeyEvent;
import java.util.Iterator;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class MainMenuUI extends javax.swing.JFrame {

    private SortedDoublyLinkedList<Course> courseList;
    private final DefaultTableModel model;

    public MainMenuUI() {
        initComponents();
        this.courseList = courseList != null ? courseList : new SortedDoublyLinkedList<>();
        model = (DefaultTableModel) TableFacultyProgrammeCourseInfo.getModel();
        //loadDataFromFile(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    // Generated using JFormDesigner Evaluation license - unknown
    private void initComponents() {
        jPanelRegistration = new JPanel();
        jLabelLogo = new JLabel();
        jLabelFaculty = new JLabel();
        jLabelProgramme = new JLabel();
        jScrollPane1 = new JScrollPane();
        TableFacultyProgrammeCourseInfo = new JTable();
        jLabelTitle = new JLabel();
        Faculty = new JComboBox<>();
        Programme = new JComboBox<>();
        jButtonDelete = new JButton();
        jButtonAdd = new JButton();
        jButtonUpdate = new JButton();
        jLabelSearch = new JLabel();
        jTextSearch = new JTextField();
        jButtonSearch = new JButton();
        jLabelCourse1 = new JLabel();
        Course = new JComboBox<>();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        var contentPane = getContentPane();

        //======== jPanelRegistration ========
        {
            jPanelRegistration.setBorder (new javax. swing. border. CompoundBorder( new javax .swing .border .TitledBorder (new javax. swing. border. EmptyBorder(
            0, 0, 0, 0) , "JFor\u006dDesi\u0067ner \u0045valu\u0061tion", javax. swing. border. TitledBorder. CENTER, javax. swing. border. TitledBorder
            . BOTTOM, new java .awt .Font ("Dia\u006cog" ,java .awt .Font .BOLD ,12 ), java. awt. Color.
            red) ,jPanelRegistration. getBorder( )) ); jPanelRegistration. addPropertyChangeListener (new java. beans. PropertyChangeListener( ){ @Override public void propertyChange (java .
            beans .PropertyChangeEvent e) {if ("bord\u0065r" .equals (e .getPropertyName () )) throw new RuntimeException( ); }} );

            //---- jLabelLogo ----
            jLabelLogo.setIcon(new ImageIcon(getClass().getResource("/images/tarumt-logo1.png")));

            //---- jLabelFaculty ----
            jLabelFaculty.setText("Faculty:");

            //---- jLabelProgramme ----
            jLabelProgramme.setText("Programme:");

            //======== jScrollPane1 ========
            {

                //---- TableFacultyProgrammeCourseInfo ----
                TableFacultyProgrammeCourseInfo.setModel(new DefaultTableModel(
                    new Object[][] {
                    },
                    new String[] {
                        "Faculty", "Programme", "Course"
                    }
                ));
                TableFacultyProgrammeCourseInfo.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        TableFacultyProgrammeCourseInfoMouseClicked(e);
                    }
                });
                TableFacultyProgrammeCourseInfo.addKeyListener(new KeyAdapter() {
                    @Override
                    public void keyReleased(KeyEvent e) {
                        TableFacultyProgrammeCourseInfoKeyReleased(e);
                    }
                });
                jScrollPane1.setViewportView(TableFacultyProgrammeCourseInfo);
            }

            //---- jLabelTitle ----
            jLabelTitle.setText("Faculty, Programme and Course Infromation System");

            //---- Faculty ----
            Faculty.setModel(new DefaultComboBoxModel<>(new String[] {
                "Faculty of Accountancy, Finance and Business (FAFB)",
                "Faculty of Communication and Creative Industries (FCCI)",
                "Faculty of Built Environment (FOBE)",
                "Faculty of Applied Science (FOAS)",
                "Faculty of Computer and Information Technology (FOCS)",
                "Faculty of Engineering and Technology (FOET)",
                "Faculty of Social Science and Humanities (FSSH)"
            }));
            Faculty.addActionListener(e -> FacultyActionPerformed(e));

            //---- Programme ----
            Programme.setModel(new DefaultComboBoxModel<>(new String[] {
                "Bachelor of Accounting (Honours)",
                "Bachelor of Arts (Honours) English with Drama",
                "Bachelor of Arts (Honours) English with Education",
                "Bachelor of Arts in English Studies (Honours)",
                "Bachelor of Banking and Finance (Honours)",
                "Bachelor of Business (Honours) in Business Analytics",
                "Bachelor of Business (Honours) in Entrepreneurship",
                "Bachelor of Business (Honours) in Human Resource Management",
                "Bachelor of Business (Honours) in International Business",
                "Bachelor of Business (Honours) in Marketing",
                "Bachelor of Business (Honours) in Marketing",
                "Bachelor of Business Administration (Honours)",
                "Bachelor of Commerce (Honours)",
                "Bachelor of Communication (Honours) in Advertising",
                "Bachelor of Communication (Honours) in Broadcasting",
                "Bachelor of Communication (Honours) in Journalism",
                "Bachelor of Communication (Honours) in Media Studies",
                "Bachelor of Computer Science (Honours) in Data Science",
                "Bachelor of Computer Science (Honours) in Interactive Software Technology",
                "Bachelor of Construction Management and Economics (Honours)",
                "Bachelor of Corporate Administration (Honours)",
                "Bachelor of Creative Multimedia (Honours)",
                "Bachelor of Design (Honours) in Fashion Design",
                "Bachelor of Design (Honours) in Graphic Design",
                "Bachelor of Early Childhood Education (Honours)",
                "Bachelor of Economics (Honours)",
                "Bachelor of Electrical and Electronics Engineering with Honours",
                "Bachelor of Finance (Honours)",
                "Bachelor of Finance and Investment (Honours)",
                "Bachelor of Hospitality Management (Honours)",
                "Bachelor of Information Systems (Honours) In Enterprise Information Systems",
                "Bachelor of Information Technology (Honours) in Information Security",
                "Bachelor of Information Technology (Honours) in Software Systems Development",
                "Bachelor of Interior Architecture (Honours)",
                "Bachelor of Manufacturing and Industrial Technology with Honours",
                "Bachelor of Materials and Manufacturing Technology with Honours",
                "Bachelor of Mechanical Engineering with Honours",
                "Bachelor of Mechatronics Engineering with Honours",
                "Bachelor of Public Relations (Honours)",
                "Bachelor of Quantity Surveying (Honours)",
                "Bachelor of Real Estate Management (Honours)",
                "Bachelor of Retail Management (Honours)",
                "Bachelor of Science (Honours) in Analytical Chemistry",
                "Bachelor of Science (Honours) in Applied Physics (Instrumentation)",
                "Bachelor of Science (Honours) in Bioscience with Chemistry",
                "Bachelor of Science (Honours) in Food Science",
                "Bachelor of Science (Honours) in Management Mathematics with Computing",
                "Bachelor of Science (Honours) in Nutrition",
                "Bachelor of Science (Honours) in Sports and Exercise Science",
                "Bachelor of Science (Honours) in Sports Coaching and Performance Analysis",
                "Bachelor of Science in Architecture (Honours)",
                "Bachelor of Social Science (Honours) in Psychology",
                "Bachelor of Software Engineering (Honours)",
                "Bachelor of Tourism Management (Honours)"
            }));
            Programme.addActionListener(e -> ProgrammeActionPerformed(e));

            //---- jButtonDelete ----
            jButtonDelete.setText("Delete");
            jButtonDelete.addActionListener(e -> jButtonDeleteActionPerformed(e));

            //---- jButtonAdd ----
            jButtonAdd.setText("Add");
            jButtonAdd.addActionListener(e -> jButtonAddActionPerformed(e));

            //---- jButtonUpdate ----
            jButtonUpdate.setText("Update");
            jButtonUpdate.addActionListener(e -> jButtonUpdateActionPerformed(e));

            //---- jLabelSearch ----
            jLabelSearch.setText("Search:");

            //---- jTextSearch ----
            jTextSearch.addActionListener(e -> jTextSearchActionPerformed(e));

            //---- jButtonSearch ----
            jButtonSearch.setText("Search");

            //---- jLabelCourse1 ----
            jLabelCourse1.setText("Course:");

            //---- Course ----
            Course.setModel(new DefaultComboBoxModel<>(new String[] {
                "BBBE 1033 Economics",
                "BBDM 1043 Principles of Management",
                "BMIT 1723 IT Fundamentals and Applications",
                "BBDM 1013 Business Communication",
                "BBDT 1013 Principles of Marketing",
                "BBDM 1023 Business Organisation and Management",
                "BBMF 1813 Principles of Finance",
                "BAMS 1753 Financial Mathematics",
                "BBBL 2023 Commercial Law",
                "BBDM 2153 Operations Management",
                "BBDT 3264 Big Data Analytics",
                "BBDT 3244 Digital Marketing",
                "BBDM 3303 Entrepreneurship",
                "BMCS 2123 Natural Language Processing",
                "BBDT 3314 Business Metrics and Analytics",
                "MPU - 3133 Falsafah dan Isu Semasa",
                "BJEL 1023 Academic English",
                "BBFA 2054 Financial Reporting",
                "BBMF 2093 Corporate Finance",
                "Business Strategy",
                "BAMS 1743 Quantitative Methods",
                "BBBE 2133 Economics for Strategy",
                "BBBE 2113 Intermediate Microeconomics",
                "MPU - 3302 Integrity and Anti-Corruption",
                "BBBE 2033 Malaysian Economy",
                "BBBE 3814 Econometrics",
                "BBDM 1063 Organisational Behaviour",
                "BBDH 2013 Human Resource Management",
                "BBDM 3013 Business Research",
                "BBDH 2013 Human Resource Management",
                "BJEL 1023 Academic English",
                "MPU-3302 Integrity and Anti-Corruption",
                "BBDT 2094 Retail Management",
                "BBDT 2174 Social Commerce",
                "BBDM 3194 Strategic Planning and Management",
                "BHEL 1913 English Language",
                "BBBE 3023 Research Methodology",
                "BAIT 2123 Internet of Things",
                "BHFD 2124 Garment and Pattern Construction II",
                "BHFD 2133 Software Application for Fashion",
                "BHFD 2143 Advanced Fashion Design Illustration",
                "MPU - 3103 Falsafah and Isu Semasa",
                "MPU - 3232 Entrepreneurship",
                "BTBE 2052 Research Methodology",
                "BTBE 2023 Civil Engineering Construction Technology",
                "BTQS 2023 Measurement of Plumbing and Electrical Services",
                "BTQS 2054 Development Economics",
                "BTQS 3033 Prices Analysis For External and Plumbing Works",
                "BTAR 1016 Design Studio I",
                "BTAR 1013 Architectural Graphic Techniques",
                "BTAR 1052 Principles of Construction and Materials",
                "BTAR 1012 History of Eastern Architecture",
                "BTAR 1062 Environmental Science",
                "BTGE 1013 Engineering Mathematics",
                "BTMM 2153 Strength of Materials",
                "BGMC 4263 Heat Transfer",
                "BTGE 2033 Engineering Statistics",
                "BTMH 4443 Robotic Systems and Design",
                "BGMC 4282 Finite element Analysis",
                "BGMC 2183 Dynamics",
                "BTEH 2223 Microprocessor Systems",
                "BTMH 1313 Industrial Control and Automation",
                "BACS 2114 Machine Learning",
                "BGGE 2044 Project Management and Finance",
                "BTEC 4213 Embedded System",
                "BGEC 3314 Digital Signal Processing",
                "BAMS 2414 Statistics Methods for Scientific Analysis",
                "BAFS 2333 Sensory Evaluation",
                "BAFS 3343 Food Preservation",
                "BAFS 2344 Food Microbiology II",
                "BAFS 3523 Therapeutic Nutrition",
                "BAFS 1353 Food Analysis",
                "BAFS 1313 Introduction to Food Science",
                "BACS 3183 Advanced Database Management",
                "BMCS 2013 Data Engineering",
                "BAIT 3003 Data Warehouse Technology",
                "BMMS 2074 Statistics for Data Science",
                "BAIT 3013 Information Systems Implementation",
                "BAIT 3043 IS Strategy and Management",
                "BAIT 3133 Database Administration",
                "BAIT 2144 Fundamentals of Computer Networks",
                "BAMS 1623 Discrete Mathematics",
                "BACS 2023 Object-oriented Programming",
                "BACS 1053 Database Management",
                "BAIT 3013 Business Intelligence",
                "BACS 2163 Software Engineering",
                "BAIT 2203 Human Computer Interaction",
                "BAIT 2073 Mobile Application Development",
                "BACS 2173 Graphic Programming",
                "BACS 3074 Artificial Intelligence",
                "BAIT 3273 Cloud Computing",
                "BAIT 1093 Introduction to Computer Security",
                "BACS 2063 Data Structure and Algorithm",
                "BACS 2033 Software Requirements Engineering",
                "BACS 2083 Formal Methods for Software Engineering",
                "BMMS 2633 Advanced Discrete Mathematics",
                "BAIT 3343 Agile Software Development",
                "BAIT 3153 Software Project Management",
                "BACS 2103 Software Quality Assurance and Testing"
            }));
            Course.addActionListener(e -> CourseActionPerformed(e));

            GroupLayout jPanelRegistrationLayout = new GroupLayout(jPanelRegistration);
            jPanelRegistration.setLayout(jPanelRegistrationLayout);
            jPanelRegistrationLayout.setHorizontalGroup(
                jPanelRegistrationLayout.createParallelGroup()
                    .addGroup(jPanelRegistrationLayout.createSequentialGroup()
                        .addGroup(jPanelRegistrationLayout.createParallelGroup()
                            .addGroup(jPanelRegistrationLayout.createSequentialGroup()
                                .addGap(353, 353, 353)
                                .addComponent(jLabelLogo, GroupLayout.PREFERRED_SIZE, 388, GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelRegistrationLayout.createSequentialGroup()
                                .addGap(344, 344, 344)
                                .addComponent(jLabelTitle)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(GroupLayout.Alignment.TRAILING, jPanelRegistrationLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanelRegistrationLayout.createParallelGroup()
                            .addGroup(jPanelRegistrationLayout.createSequentialGroup()
                                .addComponent(jButtonAdd, GroupLayout.PREFERRED_SIZE, 88, GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jButtonUpdate, GroupLayout.PREFERRED_SIZE, 88, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonDelete, GroupLayout.PREFERRED_SIZE, 88, GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanelRegistrationLayout.createSequentialGroup()
                                .addGroup(jPanelRegistrationLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabelCourse1, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelProgramme, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                                    .addComponent(jLabelFaculty, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(49, 49, 49)
                                .addGroup(jPanelRegistrationLayout.createParallelGroup()
                                    .addGroup(GroupLayout.Alignment.TRAILING, jPanelRegistrationLayout.createParallelGroup()
                                        .addComponent(Faculty, GroupLayout.PREFERRED_SIZE, 302, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Programme, GroupLayout.PREFERRED_SIZE, 305, GroupLayout.PREFERRED_SIZE))
                                    .addComponent(Course, GroupLayout.DEFAULT_SIZE, 1, Short.MAX_VALUE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanelRegistrationLayout.createParallelGroup()
                            .addGroup(jPanelRegistrationLayout.createSequentialGroup()
                                .addComponent(jLabelSearch, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21)
                                .addComponent(jTextSearch, GroupLayout.PREFERRED_SIZE, 300, GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(jButtonSearch, GroupLayout.PREFERRED_SIZE, 88, GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 600, GroupLayout.PREFERRED_SIZE))
                        .addGap(786, 786, 786))
            );
            jPanelRegistrationLayout.setVerticalGroup(
                jPanelRegistrationLayout.createParallelGroup()
                    .addGroup(jPanelRegistrationLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelLogo)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelTitle)
                        .addGap(20, 20, 20)
                        .addGroup(jPanelRegistrationLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelSearch)
                            .addComponent(jTextSearch, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonSearch)
                            .addComponent(jLabelFaculty)
                            .addComponent(Faculty, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelRegistrationLayout.createParallelGroup()
                            .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 255, GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelRegistrationLayout.createSequentialGroup()
                                .addGroup(jPanelRegistrationLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelProgramme)
                                    .addComponent(Programme, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanelRegistrationLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelCourse1)
                                    .addComponent(Course, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(101, 101, 101)
                                .addGroup(jPanelRegistrationLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButtonAdd)
                                    .addComponent(jButtonUpdate)
                                    .addComponent(jButtonDelete))))
                        .addContainerGap(111, Short.MAX_VALUE))
            );
        }

        GroupLayout contentPaneLayout = new GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanelRegistration, GroupLayout.DEFAULT_SIZE, 1083, Short.MAX_VALUE)
                    .addContainerGap())
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanelRegistration, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap())
        );
        pack();
        setLocationRelativeTo(getOwner());
    }// </editor-fold>//GEN-END:initComponents

    private void TableFacultyProgrammeCourseInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableFacultyProgrammeCourseInfoMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) TableFacultyProgrammeCourseInfo.getModel();
        Integer rowIndex = TableFacultyProgrammeCourseInfo.getSelectedRow();

        if (rowIndex != -1 && rowIndex < model.getRowCount()) {
            Faculty.setSelectedItem(model.getValueAt(rowIndex, 0).toString());
            Programme.setSelectedItem(model.getValueAt(rowIndex, 1).toString());
            Course.setSelectedItem(model.getValueAt(rowIndex, 2).toString());
        }
    }//GEN-LAST:event_TableFacultyProgrammeCourseInfoMouseClicked
    private void TableFacultyProgrammeCourseInfoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TableFacultyProgrammeCourseInfoKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_UP || evt.getKeyCode() == KeyEvent.VK_DOWN) {
            int rowIndex = TableFacultyProgrammeCourseInfo.getSelectedRow();

            if (rowIndex != -1 && rowIndex < model.getRowCount()) {
                Faculty.setSelectedItem(model.getValueAt(rowIndex, 0).toString());
                Programme.setSelectedItem(model.getValueAt(rowIndex, 1).toString());
                Course.setSelectedItem(model.getValueAt(rowIndex, 2).toString());
            }
        }
    }//GEN-LAST:event_TableFacultyProgrammeCourseInfoKeyReleased
    private void FacultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FacultyActionPerformed
        String selectedFaculty = Faculty.getSelectedItem().toString();
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();

        switch (selectedFaculty) {
            case "Faculty of Accountancy, Finance and Business (FAFB)":
                addProgrammesToModel(model, FAFBProgrammes);
                break;

            case "Faculty of Communication and Creative Industries (FCCI)":
                addProgrammesToModel(model, FCCIProgrammes);
                break;

            case "Faculty of Applied Science (FOAS)":
                addProgrammesToModel(model, FOASProgrammes);
                break;

            case "Faculty of Social Science and Humanities (FSSH)":
                addProgrammesToModel(model, FSSHProgrammes);
                break;

            case "Faculty of Built Environment (FOBE)":
                addProgrammesToModel(model, FOBEProgrammes);
                break;

            case "Faculty of Engineering and Technology (FOET)":
                addProgrammesToModel(model, FOETProgrammes);
                break;

            case "Faculty of Computer and Information Technology (FOCS)":
                addProgrammesToModel(model, FOCSProgrammes);
                break;
        }
        Programme.setModel(model);
    }//GEN-LAST:event_FacultyActionPerformed

    private void ProgrammeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProgrammeActionPerformed
        String selectedProgramme = (String) Programme.getSelectedItem().toString();
        String selectedFaculty = getFacultyFromProgramme(selectedProgramme);
        Faculty.setSelectedItem(selectedFaculty);

        populateCourseComboBox(selectedProgramme);
    }

    private void addProgrammesToModel(DefaultComboBoxModel<String> courseList, String[] programmes) {
        for (String programme : programmes) {
            courseList.addElement(programme);
        }
    }//GEN-LAST:event_ProgrammeActionPerformed
    private void populateCourseComboBox(String selectedProgramme) {
        // Here, you would implement logic to get courses offered by the selected programme
        // and then populate the Course ComboBox accordingly
        // For demonstration purposes, let's assume you have a method getCoursesByProgramme(String programmeName)
        // that returns a String[] of course names
        String[] courses = getCoursesByProgramme(selectedProgramme);
        DefaultComboBoxModel<String> courseList = new DefaultComboBoxModel<>();
        for (String course : courses) {
            courseList.addElement(course);
        }
        Course.setModel(courseList);
    }
    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        int rowIndex = TableFacultyProgrammeCourseInfo.getSelectedRow();

        if (rowIndex >= 0) {
            // Remove the selected row from the model
            model.removeRow(rowIndex);
            JOptionPane.showMessageDialog(null, "Course deleted successfully");
            //saveDataToFile(model);

            // Clear selection after deletion
            TableFacultyProgrammeCourseInfo.clearSelection();
            courseList.remove(1);

            // Also, try explicitly setting the selection to -1
            TableFacultyProgrammeCourseInfo.getSelectionModel().setSelectionInterval(-1, -1);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to delete");
        }
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        // TODO add your handling code here:
        String faculty = Faculty.getSelectedItem().toString();
        String programme = Programme.getSelectedItem().toString();
        String course = Course.getSelectedItem().toString();

        // Check if any field is empty
        if (faculty.isEmpty() || programme.isEmpty() || course.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select faculty, programme, and course");
        } else {
            // Check for duplicates
            boolean isDuplicate = false;
            Iterator<Course> iterator = courseList.iterator();
            while (iterator.hasNext()) {
                Course existingCourse = iterator.next();
                if (existingCourse.getFacultyName().equals(faculty)
                        && existingCourse.getProgrammeName().equals(programme)
                        && existingCourse.getCourseName().equals(course)) {
                    isDuplicate = true;
                    break;
                }
            }

            if (isDuplicate) {
                JOptionPane.showMessageDialog(null, "This course already exists");
            } else {
                Course newCourse = new Course(faculty, programme, course);
                courseList.add(newCourse);

                // Update table model
                DefaultTableModel model = (DefaultTableModel) TableFacultyProgrammeCourseInfo.getModel();
                model.addRow(new Object[]{newCourse.getFacultyName(), newCourse.getProgrammeName(), newCourse.getCourseName()});

                TableFacultyProgrammeCourseInfo.setModel(model);
                JOptionPane.showMessageDialog(null, "Course added successfully");
                //saveDataToFile(model);
            }
//            TableFacultyProgrammeCourseInfo.repaint();
        }
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        int rowIndex = TableFacultyProgrammeCourseInfo.getSelectedRow();

        if (rowIndex >= 0) {
            // Prompt the user to input new values for faculty, programme, and course
            String newFaculty = JOptionPane.showInputDialog(null, "Enter new faculty name:");
            String newProgramme = JOptionPane.showInputDialog(null, "Enter new programme name:");
            String newCourse = JOptionPane.showInputDialog(null, "Enter new course name:");

            // Find the position of the selected faculty name in the linked list
            int position = findPositionByFacultyName(newFaculty);

            if (position != -1) {
                // Create updated Course object
                Course updatedCourse = new Course(newFaculty, newProgramme, newCourse);

                // Update the Course object in the courseList
                courseList.update(position, updatedCourse);

                // Update the values in the table model
                model.setValueAt(newFaculty, rowIndex, 0);
                model.setValueAt(newProgramme, rowIndex, 1);
                model.setValueAt(newCourse, rowIndex, 2);

                //Save the updated Data into the file
                //saveDataToFile(model);
                JOptionPane.showMessageDialog(null, "Course updated successfully");
            } else {
                JOptionPane.showMessageDialog(null, "Course not found");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to update");
        }
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jTextSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextSearchActionPerformed
//        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) TableFacultyProgrammeCourseInfo.getModel();
        String search = jTextSearch.getText().toLowerCase();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
        TableFacultyProgrammeCourseInfo.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter("(?i)" + search));
    }//GEN-LAST:event_jTextSearchActionPerformed

    private void CourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CourseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CourseActionPerformed
    private int findPositionByFacultyName(String facultyName) {
        SortedDoublyLinkedList.Node<Course> currentNode = courseList.firstNode;
        int position = 1;
        while (currentNode != null) {
            System.out.println("Current node student ID: " + currentNode.data.getFacultyName()); // Debugging line
            if (currentNode.data.getFacultyName().trim().equalsIgnoreCase(facultyName)) {
                System.out.println("Found faculty at position: " + position);
                return position;
            }
            currentNode = currentNode.next;
            position++;
        }
        return -1; // Course not found
    }

    private String[] getCoursesByProgramme(String programmeName) {
        // Implement this method to return courses based on the selected programme
        // For example:
        switch (programmeName) {
            //FAFB
            case "Bachelor of Accounting (Honours)":
                return new String[]{"BBBE 1033 Economics", "BBDM 1043 Principles of Management", "BMIT 1723 IT Fundamentals and Applications"};

            case "Bachelor of Business (Honours) Accounting and Finance":
                return new String[]{"BMIT 1723 IT Fundamentals and Applications", "BBDM 1013 Business Communication", "BBBE 1033 Economics", "BBDM 1043Principles of Management"};

            case "Bachelor of Banking and Finance (Honours)":
                return new String[]{"BBDM 1023 Business Organisation and Management", "BBMF 1813 Principles of Finance", "BBDT 1013 Principles of Marketing", "BAMS 1753 Financial Mathematics"};

            case "Bachelor of Business Administration (Honours)":
                return new String[]{"BBDM 2153 Operations Management", "BBBL 2023 Commercial Law", "BBDT 1013 Principles of Marketing", "BMIT 1723 IT Fundamentals and Applications", "BBBE 1033 Economics"};

            case "Bachelor of Business (Honours) in Business Analytics":
                return new String[]{"BBDT 3264 Big Data Analytics", "BBDT 3244 Digital Marketing", "BBDM 3303 Entrepreneurship", "BMCS 2123 Natural Language Processing", "BBDT 3314 Business Metrics and Analytics"};

            case "Bachelor of Commerce (Honours)":
                return new String[]{"MPU - 3133 Falsafah dan Isu Semasa", "BJEL 1023 Academic English", "BBDM 3303 Entrepreneurship", "BBBE 1033 Economics", "BBDM 1023 Business Organisation and Management"};

            case "Bachelor of Corporate Administration (Honours)":
                return new String[]{"BBFA 2054 Financial Reporting", "BBMF 2093 Corporate Finance", "Business Strategy", "BBMF 1813 Principles of Finance", "BAMS 1743 Quantitative Methods"};

            case "Bachelor of Economics (Honours)":
                return new String[]{"BBBE 2133 Economics for Strategy", "BBBE 2113 Intermediate Microeconomics", "MPU - 3302 Integrity and Anti-Corruption", "BBBE 2033 Malaysian Economy", "BBBE 3814 Econometrics"};

            case "Bachelor of Business (Honours) in Entrepreneurship":
                return new String[]{"BBDM 1013 Business Communication", "BAMS 1743 Quantitative Methods", "BBBE 1033 Economics", "BBDT 1013 Principles of Marketing", "BBBL 2023 Commercial Law"};

            case "Bachelor of Finance (Honours)":
                return new String[]{"BBFA 2054 Financial Reporting", "BBMF 3403 Alternative Investments", "BBMF 2083 Insurance Management", "BBMF 3063 Financial Statement Analysis", "BBMF 3504 Ehtical and Professional Standards"};

            case "Bachelor of Finance and Investment (Honours)":
                return new String[]{"BBFA 1063 Financial Accounting", "BBMF 2093 Corporate Finance"};

            case "Bachelor of Business (Honours) in Human Resource Management":
                return new String[]{"BBDM 1063 Organisational Behaviour", "BBDH 2013 Human Resource Management", "BBDM 3013 Business Research", "BBDM 2153 Operations Management"};

            case "Bachelor of Business (Honours) in International Business":
                return new String[]{"BBMF 1813 Principles of Finance", "BBDM 2153 Operations Management", "BBDM 1063 Organisational Behaviour", "BBBL 2023 Commercial Law"};

            case "Bachelor of Business (Honours) International Business Management":
                return new String[]{"BBDH 2013 Human Resource Management", "BBDM 3013 Business Research", "BJEL 1023 Academic English", "MPU-3302 Integrity and Anti-Corruption"};

            case "Bachelor of Business (Honours) in Logistics and Supply Chain Management":
                return new String[]{"BBMF 1813 Principles of Finance", "BBDM 2153 Operations Management", "BBDM 3303 Entrepreneurship"};

            case "Bachelor of Business (Honours) in Marketing":
                return new String[]{"BBBL 2023 Commercial Law", "BBDT 2094 Retail Management", "BBDH 2013 Human Resource Management", "BBDT 2174 Social Commerce", "BBDM 3194 Strategic Planning and Management"};

            case "Bachelor of Retail Management (Honours)":
                return new String[]{};

            // FSSH
            case "Bachelor of Hospitality Management (Honours)":
                return new String[]{"BBDM 1043 Principles of Management"};

            case "Bachelor of Tourism Management (Honours)":
                return new String[]{"MPU - 3232 Entrepreneurship", "BBDM 1043 Principles of Management"};

            case "Bachelo of Tourism Management (Honours) Event Management":
                return new String[]{};

            case "Bachelor of Gastropreneurship (Honours)":
                return new String[]{};

            case "Bachelor of Hospitality and Catering Management (Honours)":
                return new String[]{};

            case "Bachelor of Social Science (Honours) in Psychology":
                return new String[]{};

            case "Bachelor of Early Childhood Education (Honours)":
                return new String[]{"BHEL 1913 English Language"};

            case "Bachelor of Arts (Honours) English with Drama":
                return new String[]{"BBDM 1013 Business Communication"};

            case "Bachelor of Arts (Honours) English with Education":
                return new String[]{"BBBE 3023 Research Methodology"};

            // FCCI
            case "Bachelor of Communication (Honours) in Advertising":
                return new String[]{};

            case "Bachelor of Communication (Honours) in Broadcasting":
                return new String[]{};

            case "Bachelor of Communication (Honours) in Journalism":
                return new String[]{};

            case "Bachelor of Communication (Honours) in Media Studies":
                return new String[]{};

            case "Bachelor of Public Relations (Honours)":
                return new String[]{};

            case "Bachelor of Communication Studies (Honours)":
                return new String[]{};

            case "Bachelor of Design (Honours) in Graphic Design":
                return new String[]{};

            case "Bachelor of Design (Honours) in Fashion Design":
                return new String[]{"BJEL 2013 English for Career", "BHFD 2124 Garment and Pattern Construction II", "BHFD 2133 Software Application for Fashion", "BHFD 2143 Advanced Fashion Design Illustration", "MPU - 3103 Falsafah and Isu Semasa"};

            case "Bachelor of Creative Multimedia (Honours)":
                return new String[]{};

            // FOBE
            case "Bachelor of Construction Management and Economics (Honours)":
                return new String[]{"BBDM 1043 Principles of Management"};

            case "Bachelor of Interior Architecture (Honours)":
                return new String[]{};

            case "Bachelor of Quantity Surveying (Honours)":
                return new String[]{"BTBE 2052 Research Methodology", "BTBE 2023 Civil Engineering Construction Technology", "BTQS 2023 Measurement of Plumbing and Electrical Services", "BTQS 2054 Development Economics", "BTQS 3033 Prices Analysis For External and Plumbing Works"};

            case "Bachelor of Real Estate Management (Honours)":
                return new String[]{};

            case "Bachelor of Science in Architecture (Honours)":
                return new String[]{"BTAR 1016 Design Studio I", "BTAR 1013 Architectural Graphic Techniques", "BTAR 1052 Principles of Construction and Materials", "BTAR 1012 History of Eastern Architecture", "BTAR 1062 Environmental Science"};

            // FOET
            case "Bachelor of Mechanical Engineering with Honours":
                return new String[]{"BTGE 1013 Engineering Mathematics", "BTMM 2153 Strength of Materials", "BGMC 4263 Heat Transfer"};

            case "Bachelor of Mechatronics Engineering with Honours":
                return new String[]{"BTGE 2033 Engineering Statistics", "BTMH 4443 Robotic Systems and Design", "BGMC 4282 Finite element Analysis", "BGMC 2183 Dynamics", "BTEH 2223 Microprocessor Systems"};

            case "Bachelor of Electrical and Electronics Engineering with Honours":
                return new String[]{"BTMH 1313 Industrial Control and Automation", "BACS 2114 Machine Learning"};

            case "Bachelor of Electronics Engineering Technology with Honours":
                return new String[]{"BGGE 2044 Project Management and Finance", "BTEC 4213 Embedded System", "BGEC 3314 Digital Signal Processing", "BAIT 2123 Internet of Things"};

            case "Bachelor of Materials and Manufacturing Technology with Honours":
                return new String[]{"BTMR 1313 Electric Circuits"};

            case "Bachelor of Manufacturing and Industrial Technology with Honours":
                return new String[]{"BTMM 2153 Strength of Materials"};

            // FOAS
            case "Bachelor of Science (Honours) in Analytical Chemistry":
                return new String[]{"BACH 2163 Polymer Chemistry", "BACH 2223 Transition Elements and Coordination Compounds", "BACH 2243 Instrumental Methods of Chemical Analysis", "BACH 2204 Chemistry Laboratory", "BACH 2253 Environmental Chemistry and Analysis"};

            case "bachelor of Science (Honours) in Bioscience with Chemistry":
                return new String[]{"BABS 1213 Integrated Biology", "BABS 1233 Microbiology", "BABS 2213 Principles of Genetics", "BABS 2233 Physiology and Behaviour of Plants", "BABS 1223 Ecology and Biodiversity"};

            case "Bachelor of Science (Honours) in Food Science":
                return new String[]{"BAFS 2333 Sensory Evaluation", "BAFS 3343 Food Preservation", "BAFS 2344 Food Microbiology II", "BAFS 3523 Therapeutic Nutrition", "BAMS 2414 Statistics Methods for Scientific Analysis"};

            case "Bachelor of Science (Honours) in Nutrition":
                return new String[]{"BAFS 1353 Food Analysis", "BAFS 1313 Introduction to Food Science"};

            // FOCS
            case "Bachelor of Science (Honours) in Data Science":
                return new String[]{"BACS 3183 Advanced Database Management", "BMCS 2013 Data Engineering", "BAIT 3003 Data Warehouse Technology", "BACS 2114 Machine Learning", "BMMS 2074 Statistics for Data Science"};

            case "Bachelor of Information Systems (Honours) In Enterprise Information Systems":
                return new String[]{"BAIT 3013 Information Systems Implementation", "BAIT 3043 IS Strategy and Management", "BAIT 3133 Database Administration", "BAIT 2144 Fundamentals of Computer Networks", "BAIT 3003 Data Warehouse Technology"};

            case "Bachelor of Science in Management Mathematics with Computing":
                return new String[]{"BAMS 1623 Discrete Mathematics", "BACS 2023 Object-oriented Programming", "BACS 1053 Database Management", "BAIT 3013 Business Intelligence", "BAMS 1753 Financial Mathematics"};

            case "Bachelor of Computer Science (Honours) in Interactive Software Technology":
                return new String[]{"BACS 2163 Software Engineering", "BAIT 2203 Human Computer Interaction", "BAIT 2073 Mobile Application Development", "BACS 2173 Graphic Programming", "BACS 3074 Artificial Intelligence"};

            case "Bachelor of Information Technology (Honours) in Information Security":
                return new String[]{"BAIT 3273 Cloud Computing", "BAIT 2073 Mobile Application Development", "BBMF 3073 Risk Management", "BAIT 2123 Internet of Things", "BMIS 2003 Blockchain Application Development"};

            case "Bachelor of Computer Science (Honours) in Data Science":
                return new String[]{"BACS 2063 Data Structure and Algorithm", "BACS 2033 Software Requirements Engineering", "BACS 2083 Formal Methods for Software Engineering", "BACS 2173 Graphics Programming", "BMMS 2633 Advanced Discrete Mathematics"};

            case "Bachelor of Information Technology (Honours) in Software Systems Development":
                return new String[]{"BAIT 3343 Agile Software Development", "BAIT 3153 Software Project Management", "BACS 2103 Software Quality Assurance and Testing", "BAIT 1093 Introduction to Computer Security", "BAIT 3273 Cloud Computing"};

            default:
                return new String[]{};
        }
    }

    private final String[] FAFBProgrammes = {
        "Bachelor of Accounting (Honours)",
        "Bachelor of Business (Honours) Accounting and Finance",
        "Bachelor of Banking and Finance (Honours)",
        "Bachelor of Business Administration (Honours)",
        "Bachelor of Business (Honours) in Business Analytics",
        "Bachelor of Commerce (Honours)",
        "Bachelor of Corporate Administration (Honours)",
        "Bachelor of Economics (Honours)",
        "Bachelor of Business (Honours) in Entrepreneurship",
        "Bachelor of Finance (Honours)",
        "Bachelor of Finance and Investment (Honours)",
        "Bachelor of Business (Honours) in Human Resource Management",
        "Bachelor of Business (Honours) in International Business",
        "Bachelor of Business (Honours) International Business Management",
        "Bachelor of Business (Honours) in Logistics and Supply Chain Management",
        "Bachelor of Business (Honours) in Marketing",
        "Bachelor of Retail Management (Honours)"
    };

    private final String[] FCCIProgrammes = {
        "Bachelor of Communication (Honours) in Advertising",
        "Bachelor of Communication (Honours) in Broadcasting",
        "Bachelor of Communication (Honours) in Journalism",
        "Bachelor of Communication (Honours) in Media Studies",
        "Bachelor of Public Relations (Honours)",
        "Bachelor of Communication Studies (Honours)",
        "Bachelor of Design (Honours) in Graphic Design",
        "Bachelor of Design (Honours) in Fashion Design",
        "Bachelor of Creative Multimedia (Honours)"
    };

    private final String[] FOBEProgrammes = {
        "Bachelor of Construction Management and Economics (Honours)",
        "Bachelor of Interior Architecture (Honours)",
        "Bachelor of Quantity Surveying (Honours)",
        "Bachelor of Real Estate Management (Honours)",
        "Bachelor of Science in Architecture (Honours)"
    };

    private final String[] FSSHProgrammes = {
        "Bachelor of Hospitality Management (Honours)",
        "Bachelor of Tourism Management (Honours)",
        "Bachelo of Tourism Management (Honours) Event Management",
        "Bachelor of Gastropreneurship (Honours)",
        "Bachelor of Hospitality and Catering Management (Honours)",
        "Bachelor of Social Science (Honours) in Psychology",
        "Bachelor of Early Childhood Education (Honours)",
        "Bachelor of Arts (Honours) English with Drama",
        "Bachelor of Arts (Honours) English with Education",
        "Bachelor of Arts in English Studies (Honours)"
    };

    private final String[] FOETProgrammes = {
        "Bachelor of Mechanical Engineering with Honours",
        "Bachelor of Mechatronics Engineering with Honours",
        "Bachelor of Electrical and Electronics Engineering with Honours",
        "Bachelor of Electronics Engineering Technology with Honours",
        "Bachelor of Materials and Manufacturing Technology with Honours",
        "Bachelor of Manufacturing and Industrial Technology with Honours"
    };

    private final String[] FOASProgrammes = {
        "Bachelor of Science (Honours) in Analytical Chemistry",
        "Bachelor of Science (Honours) in Bioscience with Chemistry",
        "Bachelor of Science (Honours) in Food Science",
        "Bachelor of Science (Honours) in Nutrition",
        "Bachelor of Science (Honours) in Sports and Exercise Science",
        "Bachelor of Ssience (Honours) in Sports Coaching and Performance Analysis",
        "Bachelor of Science (Honours) in Applied Physics (Instrumentation)"
    };

    private final String[] FOCSProgrammes = {
        "Bachelor of Science (Honours) in Management Mathematics with Computing",
        "Bachelor of Information Systems (Honours) In Enterprise Information Systems",
        "Bachelor of Computer Science (Honours) in Interactive Software Technology",
        "Bachelor of Information Technology (Honours) in Information Security",
        "Bachelor of Computer Science (Honours) in Data Science",
        "Bachelor of Information Technology (Honours) in Software Systems Development",
        "Bachelor of Software Engineering (Honours)"
    };

    private String getFacultyFromProgramme(String programme) {
        switch (programme) {
            case "Bachelor of Accounting (Honours)":
            case "Bachelor of Banking and Finance (Honours)":
            case "Bachelor of Business Administration (Honours)":
            case "Bachelor of Business (Honours) in Business Analytics":
            case "Bachelor of Business (Honours) in Entrepreneurship":
            case "Bachelor of Business (Honours) in Human Resource Management":
            case "Bachelor of Business (Honours) in International Business":
            case "Bachelor of Business (Honours) in Marketing":
            case "Bachelor of Commerce (Honours)":
            case "Bachelor of Corporate Administration (Honours)":
            case "Bachelor of Economics (Honours)":
            case "Bachelor of Finance (Honours)":
            case "Bachelor of Finance and Investment (Honours)":
            case "Bachelor of Retail Management (Honours)":
                return "Faculty of Accountancy, Finance and Business (FAFB)";

            case "Bachelor of Communication (Honours) in Advertising":
            case "Bachelor of Communication (Honours) in Broadcasting":
            case "Bachelor of Communication (Honours) in Journalism":
            case "Bachelor of Communication (Honours) in Media Studies":
            case "Bachelor of Creative Multimedia (Honours)":
            case "Bachelor of Design (Honours) in Fashion Design":
            case "Bachelor of Design (Honours) in Graphic Design":
            case "Bachelor of Public Relations (Honours)":
                return "Faculty of Communication and Creative Industries (FCCI)";

            case "Bachelor of Science (Honours) in Analytical Chemistry":
            case "Bachelor of Science (Honours) in Applied Physics (Instrumentation)":
            case "Bachelor of Science (Honours) in Bioscience with Chemistry":
            case "Bachelor of Science (Honours) in Food Science":
            case "Bachelor of Science (Honours) in Nutrition":
            case "Bachelor of Science (Honours) in Sports and Exercise Science":
            case "Bachelor of Science (Honours) in Sports Coaching and Performance Analysis":
                return "Faculty of Applied Science (FOAS)";

            case "Bachelor of Construction Management and Economics (Honours)":
            case "Bachelor of Interior Architecture (Honours)":
            case "Bachelor of Quantity Surveying (Honours)":
            case "Bachelor of Real Estate Management (Honours)":
            case "Bachelor of Science in Architecture (Honours)":
                return "Faculty of Built Environment (FOBE)";

            case "Bachelor of Computer Science (Honours) in Data Science":
            case "Bachelor of Computer Science (Honours) in Interactive Software Technology":
            case "Bachelor of Information Systems (Honours) In Enterprise Information Systems":
            case "Bachelor of Information Technology (Honours) in Information Security":
            case "Bachelor of Information Technology (Honours) in Software Systems Development":
            case "Bachelor of Science (Honours) in Management Mathematics with Computing":
            case "Bachelor of Software Engineering (Honours)":
                return "Faculty of Computer and Information Technology (FOCS)";

            case "Bachelor of Electrical and Electronics Engineering with Honours":
            case "Bachelor of Manufacturing and Industrial Technology with Honours":
            case "Bachelor of Materials and Manufacturing Technology with Honours":
            case "Bachelor of Mechanical Engineering with Honours":
            case "Bachelor of Mechatronics Engineering with Honours":
                return "Faculty of Engineering and Technology (FOET)";

            case "Bachelor of Arts (Honours) English with Drama":
            case "Bachelor of Arts (Honours) English with Education":
            case "Bachelor of Arts in English Studies (Honours)":
            case "Bachelor of Early Childhood Education (Honours)":
            case "Bachelor of Hospitality Management (Honours)":
            case "Bachelor of Social Science (Honours) in Psychology":
            case "Bachelor of Tourism Management (Honours)":
                return "Faculty of Social Science and Humanities (FSSH)";
            default:
                return "";
        }
    }

    public void listAllCourses(String outputStr) {
        System.out.println("\nList of Courses:\n" + outputStr);
    }

    public void printCourseDetails(Course course) {
        System.out.println("Course Details");
        System.out.println("Faculty Name:" + course.getFacultyName());
        System.out.println("Programme Name: " + course.getProgrammeName());
        System.out.println("Course Name: " + course.getCourseName());
//      System.out.println("Credit Hour: " + course.getCourseCreditHour());
    }

//        public String inputFacultyName() {
//            System.out.print("Enter faculty name: ");
//            String name = scanner.nextLine();
//            return name;
//        }
//
//        public String inputProgrammeName() {
//            System.out.print("Enter programme name: ");
//            String name = scanner.nextLine();
//            return name;
//        }
//
//        public String inputCourseName() {
//            System.out.print("Enter course name: ");
//            String name = scanner.nextLine();
//            return name;
//        }
//        public int inputCourseCreditHour() {
//            System.out.print("Enter course credit hour: ");
//            int creditHour = scanner.nextInt();
//            return creditHour;
//        }
    public Course inputCourseDetails() {
        String facultyName = Faculty.getSelectedItem().toString();
        String programmeName = Programme.getSelectedItem().toString();
        String courseName = Course.getSelectedItem().toString();
//      int courseCreditHour = inputCourseCreditHour();
        System.out.println();
        return new Course(facultyName, programmeName, courseName);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenuUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // Generated using JFormDesigner Evaluation license - unknown
    private JPanel jPanelRegistration;
    private JLabel jLabelLogo;
    private JLabel jLabelFaculty;
    private JLabel jLabelProgramme;
    private JScrollPane jScrollPane1;
    private JTable TableFacultyProgrammeCourseInfo;
    private JLabel jLabelTitle;
    private JComboBox<String> Faculty;
    private JComboBox<String> Programme;
    private JButton jButtonDelete;
    private JButton jButtonAdd;
    private JButton jButtonUpdate;
    private JLabel jLabelSearch;
    private JTextField jTextSearch;
    private JButton jButtonSearch;
    private JLabel jLabelCourse1;
    private JComboBox<String> Course;
    // End of variables declaration//GEN-END:variables
}
